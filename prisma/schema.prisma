generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique
  name     String
  cpf      String @unique
  email    String @unique
  contact  Int    @unique
  idade    Int
  cidade   String
  role     String
  password String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  basic   Basic?  @relation(fields: [basicId], references: [id])
  basicId String?

  pattern   Pattern? @relation(fields: [patternId], references: [id])
  patternId String?

  premium   Premium? @relation(fields: [premiumId], references: [id])
  premiumId String?

  @@map("user")
}

model Basic {
  id String @id @unique

  name    String
  email   String
  contact Int
  cpf     String
  cidade  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User       User[]
  moviebasic MovieBasic[]

  @@map("basic")
}

model Pattern {
  id String @id @unique

  name    String
  email   String
  contact Int
  cpf     String
  cidade  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User         User[]
  moviepattern MoviePattern[]

  @@map("pattern")
}

model Premium {
  id String @id @unique

  name    String
  email   String
  contact Int
  cpf     String
  cidade  String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User         User[]
  moviepremium MoviePremium[]

  @@map("premium")
}

model MovieBasic {
  id String @id @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Basic   Basic?  @relation(fields: [basicId], references: [id])
  basicId String? 

  movie Movie[]
  serie Serie[]

  @@map("moviebasic")
}

model MoviePattern {
  id String @id @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Pattern   Pattern? @relation(fields: [patternId], references: [id])
  patternId String?

  movie   Movie[]
  serie   Serie[]
  drawing Drawing[]

  @@map("moviepattern")
}

model MoviePremium {
  id String @id @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Premium   Premium? @relation(fields: [premiumId], references: [id])
  premiumId String?

  movie       Movie[]
  serie       Serie[]
  drawing     Drawing[]
  documentary Documentary[]

  @@map("moviepremium")
}

model Movie {
  id          String @id @unique
  title       String
  description String
  evaluation  Float
  image       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moviebasic   MovieBasic[]
  moviepattern MoviePattern[]
  moviepremium MoviePremium[]

  @@map("movies")
}

model Serie {
  id          String @id @unique
  title       String
  description String
  evaluation  Float
  image       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moviebasic   MovieBasic[]
  moviepattern MoviePattern[]
  moviepremium MoviePremium[]

  @@map("serie")
}

model Drawing {
  id          String @id @unique
  title       String
  description String
  evaluation  Float
  image       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moviepattern MoviePattern[]
  moviepremium MoviePremium[]

  @@map("drawing")
}

model Documentary {
  id          String @id @unique
  title       String
  description String
  evaluation  Float
  image       String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  moviepremium MoviePremium[]

  @@map("documentary")
}
